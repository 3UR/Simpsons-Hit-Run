# pretty much all copied from game-engine

# TODO(3ur): probably should use releases in the future, and if we cant bundle assets directly with the repo maybe do something else like provide them through mega and tell the user to drop them in over the build
# also by the time uwp and some todo restructuring srr2 to be game_code are done this script will be broken so itll need to be upgraded along the way

name: Build SRR2

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release
          - Tune
      platform:
        description: 'Build platform'
        required: true
        default: 'x64'
        type: choice
        options:
          - x86
          - x64
      create_release:
        description: 'Should a release be created?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
  VCPKG_COMMIT_ID: '7e21420f775f72ae938bdeb5e6068f722088f06a' # just sync with vcpkg-configuration.json baseline

jobs:     
  build:
    runs-on: windows-2022
    #runs-on: self-hosted wont use self hosted for SRR2 because other people may not have a self hosted runner setup

    steps:
    # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    
    - name: Checkout Source Code 
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: 'latest'
        
    - name: Setup VCPKG
      uses: lukka/run-vcpkg@v10.0
      with:
        vcpkgDirectory: 'vcpkg'
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
        doNotCache: false

    # TODO(3ur): in game-engine we only have x86-windows-static-md but in SRR2 we will also have x64 and x86 is vcpkg install by its self okay? - we will see if its not then thats sad
    - name: Install Dependencies (VCPKG)
      run: |
        .\vcpkg\vcpkg.exe install
    - name: Integrate (VCPKG)
      run: |
        .\vcpkg\vcpkg.exe integrate install

    - name: Build SRR2
      run: |
        msbuild.exe src/game/SRR2.vcxproj /p:Configuration=${{ github.event.inputs.configuration }} /p:Platform=${{ github.event.inputs.platform }} /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /m /clp:PerformanceSummary /p:SolutionDir=${{ github.workspace }}
        
    - name: Generate Version
      id: version
      shell: pwsh
      run: |
        $DATE = Get-Date -Format "yyyy.MM.dd-HH.mm.ss"
        $VERSION = "SRR2-${{ github.event.inputs.configuration }}-${{ github.event.inputs.platform }}-$DATE-$(${env:GITHUB_SHA}.Substring(0,7))"
        "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
    - name: Upload Build
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.create_release == 'false' }} # with releases we can just grab the build there so this is useless
      with:
        name: ${{ steps.version.outputs.version }}
        path: |
          build/**
        # TODO(3ur): ^^^ build can have bin-Win32-Debug & obj-Win32-Debug do we care about obj? should we only archive bin with action

    # so we can get the tag before we do a new release and then we can use generate_release_notes
    - name: Get Previous Tag
      if: ${{ github.event.inputs.create_release == 'true' }}
      id: get_previous_tag
      shell: pwsh
      run: |
        $LATEST_TAG = git describe --tags (git rev-list --tags --max-count=1)
        "previous_tag=$LATEST_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    # https://github.com/mikepenz/release-changelog-builder-action/issues/1303#issuecomment-1949897430
    - name: Build Changelog
      if: false #${{ github.event.inputs.create_release == 'true' }}
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        commitMode: true
        configurationJson: |
          {
            "categories": [
              {
                "title": "## What's Changed since #{{FROM_TAG}}",
                "labels": []
              }
            ],
            "template": "#{{CHANGELOG}}",
            "pr_template": "- #{{TITLE}}\n",
            "empty_template": "#{{OWNER}}\n#{{REPO}}\n#{{FROM_TAG}}\n#{{TO_TAG}}",
            "max_pull_requests": 1000,
            "max_back_track_time_days": 1000
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: ${{ github.event.inputs.configuration != 'Release' }}
        release_name: ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        #body: ${{ steps.changelog.outputs.changelog }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#about-the-github_token-secret

    # pretty much the upload build step but it makes a zip of build folder
    - name: Zip Build
      if: ${{ github.event.inputs.create_release == 'true' }}
      run: |
        tar -czf ${{ github.workspace }}/${{ steps.version.outputs.version }}.zip -C build .

    - name: Upload Build
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.workspace }}/${{ steps.version.outputs.version }}.zip
        asset_name: ${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
