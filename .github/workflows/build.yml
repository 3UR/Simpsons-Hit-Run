# pretty much all copied from game-engine
name: Build SRR2
on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration'
        required: true
        default: 'DebugUwp'
        type: choice
        options:
          - DebugWindows
          - ReleaseWindows
          - TuneWindows
          - DebugUwp
          - ReleaseUwp
          - TuneUwp
      platform:
        description: 'Build platform (x86 will not work with UWP)'
        required: true
        default: 'x64'
        type: choice
        options:
          - x86
          - x64
      create_release:
        description: 'Should a release be created?'
        required: false
        default: false
        type: boolean
      # dont care right now shouldnt have to have this its terrible because we should check based on the configuration input
      is_uwp_build:
        description: 'Check this if your using a UWP configuration'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
  VCPKG_COMMIT_ID: '5f8c424e267b7360d451df406eeefb3767985b17' # just sync with vcpkg-configuration.json baseline

jobs:     
  build:
    runs-on: windows-2022

    steps:
    # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    
    - name: Checkout Source Code 
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.sha }}
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: 'latest'
        
    - name: Setup VCPKG
      uses: lukka/run-vcpkg@v10.0
      with:
        vcpkgDirectory: 'vcpkg'
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
        doNotCache: false
    
    - name: Install Dependencies (VCPKG) (Non-UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'false' }}
      run: .\vcpkg\vcpkg.exe install
    - name: Install Dependencies (VCPKG) (UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'true' }}
      run: .\vcpkg\vcpkg.exe install --triplet x64-uwp --allow-unsupported
    - name: Integrate (VCPKG)
      run: |
        .\vcpkg\vcpkg.exe integrate install

    - name: Build SRR2 (Non-UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'false' }}
      run: msbuild.exe src/srr2/SRR2.vcxproj /p:Configuration=${{ github.event.inputs.configuration }} /p:Platform=${{ github.event.inputs.platform }} /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /m /clp:PerformanceSummary /p:SolutionDir=${{ github.workspace }}
    - name: Build SRR2 (UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'true' }}
      run: msbuild.exe src/srr2_uwp/SRR2_UWP.vcxproj /p:Configuration=${{ github.event.inputs.configuration }} /p:Platform=${{ github.event.inputs.platform }} /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /m /clp:PerformanceSummary /p:SolutionDir=${{ github.workspace }}
      
    - name: Generate Version
      id: version
      shell: pwsh
      run: |
        $DATE = Get-Date -Format "yyyy.MM.dd-HH.mm.ss"
        $VERSION = "SRR2-${{ github.event.inputs.configuration }}-${{ github.event.inputs.platform }}-$DATE-$(${env:GITHUB_SHA}.Substring(0,7))"
        "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        
    - name: Package as APPX (UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'true' }}
      run: |
        MakeAppx.exe pack /d "build/UWP-bin-${{ github.event.inputs.platform }}-${{ github.event.inputs.configuration }}/Appx" /p "AppPackages\SRR2.appx" /o

    - name: Sign APPX (UWP)
      if: ${{ github.event.inputs.is_uwp_build == 'true' }}
      run: |
        SignTool sign /fd SHA256 /a /f "src/srr2_uwp/SRR2_UWP_TemporaryKey.pfx" "AppPackages\SRR2.appx"

    # these upload build steps dont upload to releases but rather the actions ui it is ran only if create release is false
    - name: Upload Build (Non-UWP)
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.create_release == 'false' && github.event.inputs.is_uwp_build == 'false' }}
      with:
        name: ${{ steps.version.outputs.version }}
        path: build/**
        # 3ur: ^ dont care, we arent distributing it through a release so keep the obj and bin

    - name: Upload Build (UWP)
      uses: actions/upload-artifact@v4
      if: ${{ github.event.inputs.create_release == 'false' && github.event.inputs.is_uwp_build == 'true' }}
      with:
        name: ${{ steps.version.outputs.version }}
        path: AppPackages/SRR2.appx
        # 3ur: ^ dont care, we arent distributing it through a release so keep the obj and bin

    # so we can get the tag before we do a new release and then we can use generate_release_notes
    - name: Get Previous Tag
      if: ${{ github.event.inputs.create_release == 'true' }}
      id: get_previous_tag
      shell: pwsh
      run: |
        $LATEST_TAG = git describe --tags (git rev-list --tags --max-count=1)
        "previous_tag=$LATEST_TAG" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    # https://github.com/mikepenz/release-changelog-builder-action/issues/1303#issuecomment-1949897430
    # TODO(3ur): work on this
    - name: Build Changelog
      if: false 
      # TODO(3ur): disabled this ${{ github.event.inputs.create_release == 'true' }}
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v5
      with:
        commitMode: true
        configurationJson: |
          {
            "categories": [
              {
                "title": "## What's Changed since #{{FROM_TAG}}",
                "labels": []
              }
            ],
            "template": "#{{CHANGELOG}}",
            "pr_template": "- #{{TITLE}}\n",
            "empty_template": "#{{OWNER}}\n#{{REPO}}\n#{{FROM_TAG}}\n#{{TO_TAG}}",
            "max_pull_requests": 1000,
            "max_back_track_time_days": 1000
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: ${{ github.event.inputs.configuration != 'Release' }}
        release_name: ${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#about-the-github_token-secret

    # pretty much the upload build step but it makes a zip of build folder
    # TODO(3ur): jank jank jank why the hell does this have the version inside the zip but no extension ? instead of just a zip with bin and obj folders
    - name: Zip Build # doesnt happen on uwp. we just upload appx directly
      if: ${{ github.event.inputs.create_release == 'false' && !contains(github.event.inputs.configuration, 'Uwp') }}
      run: |
        tar -czf ${{ github.workspace }}/${{ steps.version.outputs.version }}.zip -C build .

    # nasty boilerplate n duplicated code but im rushing this since i got half a screen and its still dying more 
    - name: Upload Build (Non-UWP)
      if: ${{ github.event.inputs.create_release == 'false' && github.event.inputs.is_uwp_build == 'false' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ github.workspace }}/${{ steps.version.outputs.version }}.zip
        asset_name: ${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build (UWP)
      if: ${{ github.event.inputs.create_release == 'false' && github.event.inputs.is_uwp_build == 'true' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: AppPackages/SRR2.appx
        asset_name: SRR2.appx
        asset_content_type: application/vnd.ms-appx
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
